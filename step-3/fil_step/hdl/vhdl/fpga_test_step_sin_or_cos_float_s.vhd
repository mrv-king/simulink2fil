-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fpga_test_step_sin_or_cos_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fpga_test_step_sin_or_cos_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_C2 : STD_LOGIC_VECTOR (7 downto 0) := "11000010";
    constant ap_const_lv8_3F : STD_LOGIC_VECTOR (7 downto 0) := "00111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_83 : STD_LOGIC_VECTOR (7 downto 0) := "10000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv29_1FFFFFFF : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111111111111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_7F : STD_LOGIC_VECTOR (8 downto 0) := "001111111";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_7FFFFF : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ref_4oPi_table_100_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_100_ce0 : STD_LOGIC;
    signal ref_4oPi_table_100_q0 : STD_LOGIC_VECTOR (99 downto 0);
    signal second_order_float_sin_cos_K0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_sin_cos_K0_ce0 : STD_LOGIC;
    signal second_order_float_sin_cos_K0_q0 : STD_LOGIC_VECTOR (29 downto 0);
    signal second_order_float_sin_cos_K1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_sin_cos_K1_ce0 : STD_LOGIC;
    signal second_order_float_sin_cos_K1_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal second_order_float_sin_cos_K2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_sin_cos_K2_ce0 : STD_LOGIC;
    signal second_order_float_sin_cos_K2_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal din_sign_reg_1335 : STD_LOGIC_VECTOR (0 downto 0);
    signal din_exp_fu_312_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal din_exp_reg_1341 : STD_LOGIC_VECTOR (7 downto 0);
    signal din_sig_fu_322_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal din_sig_reg_1348 : STD_LOGIC_VECTOR (22 downto 0);
    signal closepath_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1353 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln494_fu_332_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln494_reg_1360 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln408_fu_365_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln408_reg_1370 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_fu_446_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_reg_1375 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal Mx_fu_544_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_reg_1380 : STD_LOGIC_VECTOR (28 downto 0);
    signal Ex_1_fu_554_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_1_reg_1385 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_fu_614_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal B_reg_1390 : STD_LOGIC_VECTOR (21 downto 0);
    signal cos_basis_fu_618_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1395 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_trunc_reg_1402 : STD_LOGIC_VECTOR (14 downto 0);
    signal result_reg_1422 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal out_bits_0_fu_813_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_bits_0_reg_1428 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_bits_1_fu_831_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_bits_1_reg_1433 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln281_fu_919_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln281_reg_1462 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln311_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_add_i166_lcssa_phi_fu_267_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln318_fu_952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_3_fu_976_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln321_fu_1038_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln318_fu_947_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_phi_mux_result_mantissa_phi_fu_276_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln321_fu_1033_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln407_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_182 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln311_fu_848_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_1_fu_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_1_6_fu_890_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_1_3_fu_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_1_5_fu_882_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_shift_fu_194 : STD_LOGIC_VECTOR (28 downto 0);
    signal in_shift_3_fu_1029_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal i_1_fu_198 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln318_fu_958_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shift_fu_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln29_fu_282_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln32_fu_286_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal h_fu_290_p0 : STD_LOGIC_VECTOR (79 downto 0);
    signal h_fu_290_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal data_fu_300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln405_fu_336_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_fu_342_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_350_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal Ex_fu_374_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln408_fu_393_p1 : STD_LOGIC_VECTOR (99 downto 0);
    signal shl_ln408_fu_396_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal X_fu_386_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal h_fu_290_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal k_fu_428_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_438_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln480_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_fu_418_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal and_ln480_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_1_fu_464_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal Mx_bits_3_fu_470_p3 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_2_fu_478_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal t_fu_488_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_8_fu_496_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_9_fu_506_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln104_fu_514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_518_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Mx_zeros_fu_526_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln533_fu_534_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal shl_ln533_fu_538_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal select_ln482_fu_379_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln534_fu_530_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln535_fu_560_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_fu_564_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln535_fu_572_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln535_fu_578_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln535_fu_590_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln535_1_fu_586_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln535_fu_594_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln535_fu_600_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln535_1_fu_606_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cos_basis_fu_618_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal sin_basis_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_640_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal A_fu_666_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln23_fu_690_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln23_fu_687_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln23_fu_690_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln23_fu_690_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal B_squared_fu_696_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln29_fu_282_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal mul_ln30_fu_743_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln30_fu_743_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal t1_fu_710_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln_fu_729_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln32_fu_759_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln32_1_fu_763_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln1_fu_749_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_fu_767_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln32_2_fu_773_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln32_1_fu_777_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal Mx_1_fu_681_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln32_fu_286_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_3_fu_803_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_821_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln312_fu_854_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_fu_858_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_864_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_0_fu_874_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ex_3_fu_913_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln319_fu_964_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln319_fu_968_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_983_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln320_fu_991_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln320_fu_1005_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln320_fu_997_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln320_fu_1009_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln320_fu_1015_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln320_1_fu_1021_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln329_fu_1059_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln329_fu_1064_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal newexp_fu_1068_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1074_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln335_fu_1082_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_fu_1107_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_1113_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_1151_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_fu_1196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_1_fu_1201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln311_1_fu_1212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_fu_1189_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln311_fu_1217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_fu_1206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_1_fu_1223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_1_fu_1236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln300_fu_1242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln335_fu_1087_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_1103_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln300_fu_1256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln300_2_fu_1248_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln300_1_fu_1262_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_fu_1093_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal select_ln300_5_fu_1278_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal select_ln300_3_fu_1286_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal results_sign_2_fu_1229_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_exp_fu_1270_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal results_sig_fu_1294_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal t_2_fu_1302_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln356_fu_1312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal h_fu_290_p10 : STD_LOGIC_VECTOR (79 downto 0);
    signal mul_ln29_fu_282_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal mul_ln30_fu_743_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln32_fu_286_p10 : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fpga_test_step_mul_23s_22ns_45_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (22 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;


    component fpga_test_step_mul_30s_29ns_58_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (29 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (57 downto 0) );
    end component;


    component fpga_test_step_mul_80s_24ns_80_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (79 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (79 downto 0) );
    end component;


    component fpga_test_step_mux_8_3_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fpga_test_step_mul_15ns_15ns_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component fpga_test_step_mul_15ns_15s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component fpga_test_step_mux_16_4_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fpga_test_step_sin_or_cos_float_s_ref_4oPi_table_100_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component fpga_test_step_sin_or_cos_float_s_second_order_float_sin_cos_K0_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component fpga_test_step_sin_or_cos_float_s_second_order_float_sin_cos_K1_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component fpga_test_step_sin_or_cos_float_s_second_order_float_sin_cos_K2_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    ref_4oPi_table_100_U : component fpga_test_step_sin_or_cos_float_s_ref_4oPi_table_100_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 100,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_4oPi_table_100_address0,
        ce0 => ref_4oPi_table_100_ce0,
        q0 => ref_4oPi_table_100_q0);

    second_order_float_sin_cos_K0_U : component fpga_test_step_sin_or_cos_float_s_second_order_float_sin_cos_K0_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 30,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_sin_cos_K0_address0,
        ce0 => second_order_float_sin_cos_K0_ce0,
        q0 => second_order_float_sin_cos_K0_q0);

    second_order_float_sin_cos_K1_U : component fpga_test_step_sin_or_cos_float_s_second_order_float_sin_cos_K1_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 23,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_sin_cos_K1_address0,
        ce0 => second_order_float_sin_cos_K1_ce0,
        q0 => second_order_float_sin_cos_K1_q0);

    second_order_float_sin_cos_K2_U : component fpga_test_step_sin_or_cos_float_s_second_order_float_sin_cos_K2_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 15,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_sin_cos_K2_address0,
        ce0 => second_order_float_sin_cos_K2_ce0,
        q0 => second_order_float_sin_cos_K2_q0);

    mul_23s_22ns_45_1_1_U1 : component fpga_test_step_mul_23s_22ns_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 23,
        din1_WIDTH => 22,
        dout_WIDTH => 45)
    port map (
        din0 => second_order_float_sin_cos_K1_q0,
        din1 => mul_ln29_fu_282_p1,
        dout => mul_ln29_fu_282_p2);

    mul_30s_29ns_58_1_1_U2 : component fpga_test_step_mul_30s_29ns_58_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 30,
        din1_WIDTH => 29,
        dout_WIDTH => 58)
    port map (
        din0 => add_ln32_1_fu_777_p2,
        din1 => mul_ln32_fu_286_p1,
        dout => mul_ln32_fu_286_p2);

    mul_80s_24ns_80_1_1_U3 : component fpga_test_step_mul_80s_24ns_80_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 80,
        din1_WIDTH => 24,
        dout_WIDTH => 80)
    port map (
        din0 => h_fu_290_p0,
        din1 => h_fu_290_p1,
        dout => h_fu_290_p2);

    mux_8_3_1_1_1_U4 : component fpga_test_step_mux_8_3_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => cos_basis_fu_618_p9,
        dout => cos_basis_fu_618_p10);

    mul_15ns_15ns_30_1_1_U5 : component fpga_test_step_mul_15ns_15ns_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln23_fu_690_p0,
        din1 => mul_ln23_fu_690_p1,
        dout => mul_ln23_fu_690_p2);

    mul_15ns_15s_30_1_1_U6 : component fpga_test_step_mul_15ns_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln30_fu_743_p0,
        din1 => second_order_float_sin_cos_K2_q0,
        dout => mul_ln30_fu_743_p2);

    mux_16_4_1_1_1_U7 : component fpga_test_step_mux_16_4_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => index_fu_1107_p3,
        dout => tmp_7_fu_1113_p18);

    mux_16_4_1_1_1_U8 : component fpga_test_step_mux_16_4_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => index_fu_1107_p3,
        dout => tmp_10_fu_1151_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln321_fu_1038_p2 = ap_const_lv1_0) or (icmp_ln318_fu_952_p2 = ap_const_lv1_1)))) then 
                    ap_return_preg <= bitcast_ln356_fu_1312_p1;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln311_fu_842_p2 = ap_const_lv1_1))) then 
                i_1_fu_198 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln321_fu_1038_p2 = ap_const_lv1_1) and (icmp_ln318_fu_952_p2 = ap_const_lv1_0))) then 
                i_1_fu_198 <= add_ln318_fu_958_p2;
            end if; 
        end if;
    end process;

    i_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_182 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln311_fu_842_p2 = ap_const_lv1_0))) then 
                i_fu_182 <= add_ln311_fu_848_p2;
            end if; 
        end if;
    end process;

    in_shift_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln311_fu_842_p2 = ap_const_lv1_1))) then 
                in_shift_fu_194 <= result_reg_1422;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln321_fu_1038_p2 = ap_const_lv1_1) and (icmp_ln318_fu_952_p2 = ap_const_lv1_0))) then 
                in_shift_fu_194 <= in_shift_3_fu_1029_p1;
            end if; 
        end if;
    end process;

    shift_fu_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln311_fu_842_p2 = ap_const_lv1_1))) then 
                shift_fu_202 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln321_fu_1038_p2 = ap_const_lv1_1) and (icmp_ln318_fu_952_p2 = ap_const_lv1_0))) then 
                shift_fu_202 <= shift_3_fu_976_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                B_reg_1390 <= B_fu_614_p1;
                B_trunc_reg_1402 <= select_ln535_1_fu_606_p3(21 downto 7);
                Ex_1_reg_1385 <= Ex_1_fu_554_p2;
                Mx_reg_1380 <= shl_ln533_fu_538_p2(57 downto 29);
                cos_basis_reg_1395 <= cos_basis_fu_618_p10;
                k_1_reg_1375 <= k_1_fu_446_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln311_fu_842_p2 = ap_const_lv1_0))) then
                c_1_3_fu_190 <= c_1_5_fu_882_p3;
                c_1_fu_186 <= c_1_6_fu_890_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                closepath_reg_1353 <= closepath_fu_326_p2;
                din_exp_reg_1341 <= data_fu_300_p1(30 downto 23);
                din_sig_reg_1348 <= din_sig_fu_322_p1;
                din_sign_reg_1335 <= data_fu_300_p1(31 downto 31);
                trunc_ln408_reg_1370 <= trunc_ln408_fu_365_p1;
                trunc_ln494_reg_1360 <= trunc_ln494_fu_332_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    out_bits_0_reg_1428(31 downto 16) <= out_bits_0_fu_813_p3(31 downto 16);
                    out_bits_1_reg_1433(31 downto 19) <= out_bits_1_fu_831_p3(31 downto 19);
                result_reg_1422 <= mul_ln32_fu_286_p2(57 downto 29);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln311_fu_842_p2 = ap_const_lv1_1))) then
                sext_ln281_reg_1462 <= sext_ln281_fu_919_p1;
            end if;
        end if;
    end process;
    out_bits_0_reg_1428(15 downto 0) <= "1000000000000000";
    out_bits_1_reg_1433(18 downto 0) <= "1000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln311_fu_842_p2, ap_CS_fsm_state5, icmp_ln318_fu_952_p2, icmp_ln321_fu_1038_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln311_fu_842_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln321_fu_1038_p2 = ap_const_lv1_0) or (icmp_ln318_fu_952_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    A_fu_666_p3 <= (sin_basis_fu_660_p2 & tmp_1_fu_640_p4);
    B_fu_614_p1 <= select_ln535_1_fu_606_p3(22 - 1 downto 0);
    B_squared_fu_696_p4 <= mul_ln23_fu_690_p2(29 downto 15);
    Ex_1_fu_554_p2 <= std_logic_vector(unsigned(select_ln482_fu_379_p3) - unsigned(zext_ln534_fu_530_p1));
    Ex_3_fu_913_p3 <= 
        ap_const_lv8_0 when (cos_basis_reg_1395(0) = '1') else 
        Ex_1_reg_1385;
    Ex_fu_374_p2 <= std_logic_vector(unsigned(din_exp_reg_1341) + unsigned(ap_const_lv8_83));
    Mx_1_fu_681_p3 <= 
        ap_const_lv29_1FFFFFFF when (cos_basis_reg_1395(0) = '1') else 
        Mx_reg_1380;
    Mx_bits_1_fu_464_p2 <= std_logic_vector(unsigned(ap_const_lv58_0) - unsigned(Mx_bits_fu_418_p4));
    Mx_bits_3_fu_470_p3 <= 
        Mx_bits_1_fu_464_p2 when (and_ln480_fu_458_p2(0) = '1') else 
        Mx_bits_fu_418_p4;
    Mx_bits_fu_418_p4 <= h_fu_290_p2(76 downto 19);
    Mx_fu_544_p4 <= shl_ln533_fu_538_p2(57 downto 29);
    Mx_zeros_fu_526_p1 <= tmp_s_fu_518_p3(6 - 1 downto 0);
    X_fu_386_p3 <= (ap_const_lv1_1 & trunc_ln494_reg_1360);
    add_ln311_fu_848_p2 <= std_logic_vector(unsigned(i_fu_182) + unsigned(ap_const_lv2_1));
    add_ln318_fu_958_p2 <= std_logic_vector(unsigned(i_1_fu_198) + unsigned(ap_const_lv2_1));
    add_ln329_fu_1059_p2 <= std_logic_vector(signed(sext_ln281_reg_1462) + signed(ap_const_lv9_7F));
    add_ln32_1_fu_777_p2 <= std_logic_vector(unsigned(add_ln32_fu_767_p2) + unsigned(sext_ln32_2_fu_773_p1));
    add_ln32_fu_767_p2 <= std_logic_vector(signed(sext_ln32_fu_759_p1) + signed(sext_ln32_1_fu_763_p1));
    add_ln405_fu_336_p2 <= std_logic_vector(unsigned(din_exp_fu_312_p4) + unsigned(ap_const_lv8_C2));
    addr_fu_342_p3 <= 
        ap_const_lv8_3F when (closepath_fu_326_p2(0) = '1') else 
        add_ln405_fu_336_p2;
    and_ln300_1_fu_1236_p2 <= (icmp_ln300_fu_1196_p2 and icmp_ln300_1_fu_1201_p2);
    and_ln300_fu_1206_p2 <= (icmp_ln300_fu_1196_p2 and icmp_ln300_1_fu_1201_p2);
    and_ln480_fu_458_p2 <= (xor_ln480_fu_453_p2 and tmp_fu_438_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln318_fu_952_p2, icmp_ln321_fu_1038_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln321_fu_1038_p2 = ap_const_lv1_0) or (icmp_ln318_fu_952_p2 = ap_const_lv1_1))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_add_i166_lcssa_phi_fu_267_p4_assign_proc : process(ap_CS_fsm_state5, icmp_ln318_fu_952_p2, shift_3_fu_976_p2, icmp_ln321_fu_1038_p2, shift_fu_202)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if (((icmp_ln321_fu_1038_p2 = ap_const_lv1_0) and (icmp_ln318_fu_952_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_add_i166_lcssa_phi_fu_267_p4 <= shift_3_fu_976_p2;
            elsif ((icmp_ln318_fu_952_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_add_i166_lcssa_phi_fu_267_p4 <= shift_fu_202;
            else 
                ap_phi_mux_add_i166_lcssa_phi_fu_267_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_add_i166_lcssa_phi_fu_267_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_result_mantissa_phi_fu_276_p4_assign_proc : process(ap_CS_fsm_state5, icmp_ln318_fu_952_p2, icmp_ln321_fu_1038_p2, trunc_ln318_fu_947_p1, trunc_ln321_fu_1033_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if (((icmp_ln321_fu_1038_p2 = ap_const_lv1_0) and (icmp_ln318_fu_952_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_result_mantissa_phi_fu_276_p4 <= trunc_ln321_fu_1033_p1;
            elsif ((icmp_ln318_fu_952_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_result_mantissa_phi_fu_276_p4 <= trunc_ln318_fu_947_p1;
            else 
                ap_phi_mux_result_mantissa_phi_fu_276_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_result_mantissa_phi_fu_276_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln318_fu_952_p2, icmp_ln321_fu_1038_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln321_fu_1038_p2 = ap_const_lv1_0) or (icmp_ln318_fu_952_p2 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state5, icmp_ln318_fu_952_p2, icmp_ln321_fu_1038_p2, bitcast_ln356_fu_1312_p1, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln321_fu_1038_p2 = ap_const_lv1_0) or (icmp_ln318_fu_952_p2 = ap_const_lv1_1)))) then 
            ap_return <= bitcast_ln356_fu_1312_p1;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln356_fu_1312_p1 <= t_2_fu_1302_p4;
    
    c_0_fu_874_p3_proc : process(tmp_5_fu_864_p4)
    begin
        c_0_fu_874_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if tmp_5_fu_864_p4(i) = '1' then
                c_0_fu_874_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    c_1_5_fu_882_p3 <= 
        c_1_3_fu_190 when (trunc_ln312_fu_854_p1(0) = '1') else 
        c_0_fu_874_p3;
    c_1_6_fu_890_p3 <= 
        c_0_fu_874_p3 when (trunc_ln312_fu_854_p1(0) = '1') else 
        c_1_fu_186;
    closepath_fu_326_p2 <= "1" when (unsigned(din_exp_fu_312_p4) < unsigned(ap_const_lv8_7E)) else "0";
    cos_basis_fu_618_p9 <= 
        ap_const_lv3_0 when (closepath_reg_1353(0) = '1') else 
        k_fu_428_p4;
    data_fu_300_p1 <= t_in;
    din_exp_fu_312_p4 <= data_fu_300_p1(30 downto 23);
    din_sig_fu_322_p1 <= data_fu_300_p1(23 - 1 downto 0);
    empty_fu_1103_p1 <= newexp_fu_1068_p2(8 - 1 downto 0);
    h_fu_290_p0 <= shl_ln408_fu_396_p2(99 downto 20);
    h_fu_290_p1 <= h_fu_290_p10(24 - 1 downto 0);
    h_fu_290_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X_fu_386_p3),80));
    icmp_ln300_1_fu_1201_p2 <= "1" when (din_sig_reg_1348 = ap_const_lv23_0) else "0";
    icmp_ln300_fu_1196_p2 <= "1" when (din_exp_reg_1341 = ap_const_lv8_0) else "0";
    icmp_ln311_1_fu_1212_p2 <= "1" when (din_exp_reg_1341 = ap_const_lv8_FF) else "0";
    icmp_ln311_fu_842_p2 <= "1" when (i_fu_182 = ap_const_lv2_2) else "0";
    icmp_ln318_fu_952_p2 <= "1" when (i_1_fu_198 = ap_const_lv2_2) else "0";
    icmp_ln321_fu_1038_p2 <= "1" when (select_ln319_fu_968_p3 = ap_const_lv32_10) else "0";
    icmp_ln335_fu_1082_p2 <= "1" when (result_reg_1422 = ap_const_lv29_0) else "0";
    in_shift_3_fu_1029_p1 <= select_ln320_1_fu_1021_p3(29 - 1 downto 0);
    index_fu_1107_p3 <= (din_sign_reg_1335 & k_1_reg_1375);
    k_1_fu_446_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1353(0) = '1') else 
        k_fu_428_p4;
    k_fu_428_p4 <= h_fu_290_p2(79 downto 77);
    lshr_ln320_fu_1009_p2 <= std_logic_vector(shift_right(unsigned(zext_ln320_fu_1005_p1),to_integer(unsigned('0' & select_ln320_fu_997_p3(31-1 downto 0)))));
    lshr_ln535_fu_594_p2 <= std_logic_vector(shift_right(unsigned(zext_ln535_fu_590_p1),to_integer(unsigned('0' & sext_ln535_1_fu_586_p1(31-1 downto 0)))));
    lshr_ln_fu_350_p4 <= addr_fu_342_p3(7 downto 4);
    mul_ln23_fu_690_p0 <= zext_ln23_fu_687_p1(15 - 1 downto 0);
    mul_ln23_fu_690_p1 <= zext_ln23_fu_687_p1(15 - 1 downto 0);
    mul_ln29_fu_282_p1 <= mul_ln29_fu_282_p10(22 - 1 downto 0);
    mul_ln29_fu_282_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_reg_1390),45));
    mul_ln30_fu_743_p0 <= mul_ln30_fu_743_p00(15 - 1 downto 0);
    mul_ln30_fu_743_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_fu_696_p4),30));
    mul_ln32_fu_286_p1 <= mul_ln32_fu_286_p10(29 - 1 downto 0);
    mul_ln32_fu_286_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_1_fu_681_p3),58));
    newexp_fu_1068_p2 <= std_logic_vector(signed(sext_ln329_fu_1064_p1) - signed(ap_phi_mux_add_i166_lcssa_phi_fu_267_p4));
    or_ln300_fu_1256_p2 <= (icmp_ln311_1_fu_1212_p2 or and_ln300_fu_1206_p2);
    or_ln335_fu_1087_p2 <= (tmp_12_fu_1074_p3 or icmp_ln335_fu_1082_p2);
    out_bits_0_fu_813_p3 <= (tmp_3_fu_803_p4 & ap_const_lv16_8000);
    out_bits_1_fu_831_p3 <= (tmp_4_fu_821_p4 & ap_const_lv19_40000);
    phitmp_fu_1093_p4 <= ap_phi_mux_result_mantissa_phi_fu_276_p4(27 downto 5);
    ref_4oPi_table_100_address0 <= zext_ln407_fu_360_p1(4 - 1 downto 0);

    ref_4oPi_table_100_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            ref_4oPi_table_100_ce0 <= ap_const_logic_1;
        else 
            ref_4oPi_table_100_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    results_exp_fu_1270_p3 <= 
        select_ln300_2_fu_1248_p3 when (or_ln300_fu_1256_p2(0) = '1') else 
        select_ln300_1_fu_1262_p3;
    results_sig_fu_1294_p3 <= 
        select_ln300_5_fu_1278_p3 when (or_ln300_fu_1256_p2(0) = '1') else 
        select_ln300_3_fu_1286_p3;
    results_sign_1_fu_1223_p2 <= (xor_ln311_fu_1217_p2 and results_sign_fu_1189_p3);
    results_sign_2_fu_1229_p3 <= 
        din_sign_reg_1335 when (and_ln300_fu_1206_p2(0) = '1') else 
        results_sign_1_fu_1223_p2;
    results_sign_fu_1189_p3 <= 
        tmp_7_fu_1113_p18 when (cos_basis_reg_1395(0) = '1') else 
        tmp_10_fu_1151_p18;
    second_order_float_sin_cos_K0_address0 <= zext_ln28_fu_674_p1(8 - 1 downto 0);

    second_order_float_sin_cos_K0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            second_order_float_sin_cos_K0_ce0 <= ap_const_logic_1;
        else 
            second_order_float_sin_cos_K0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_sin_cos_K1_address0 <= zext_ln28_fu_674_p1(8 - 1 downto 0);

    second_order_float_sin_cos_K1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            second_order_float_sin_cos_K1_ce0 <= ap_const_logic_1;
        else 
            second_order_float_sin_cos_K1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_sin_cos_K2_address0 <= zext_ln28_fu_674_p1(8 - 1 downto 0);

    second_order_float_sin_cos_K2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            second_order_float_sin_cos_K2_ce0 <= ap_const_logic_1;
        else 
            second_order_float_sin_cos_K2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln300_1_fu_1262_p3 <= 
        ap_const_lv8_0 when (or_ln335_fu_1087_p2(0) = '1') else 
        empty_fu_1103_p1;
    select_ln300_2_fu_1248_p3 <= 
        ap_const_lv8_FF when (xor_ln300_fu_1242_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln300_3_fu_1286_p3 <= 
        ap_const_lv23_0 when (or_ln335_fu_1087_p2(0) = '1') else 
        phitmp_fu_1093_p4;
    select_ln300_5_fu_1278_p3 <= 
        ap_const_lv23_7FFFFF when (xor_ln300_fu_1242_p2(0) = '1') else 
        ap_const_lv23_0;
    select_ln319_fu_968_p3 <= 
        c_1_fu_186 when (trunc_ln319_fu_964_p1(0) = '1') else 
        c_1_3_fu_190;
    select_ln320_1_fu_1021_p3 <= 
        lshr_ln320_fu_1009_p2 when (tmp_11_fu_983_p3(0) = '1') else 
        shl_ln320_fu_1015_p2;
    select_ln320_fu_997_p3 <= 
        sub_ln320_fu_991_p2 when (tmp_11_fu_983_p3(0) = '1') else 
        select_ln319_fu_968_p3;
    select_ln482_fu_379_p3 <= 
        Ex_fu_374_p2 when (closepath_reg_1353(0) = '1') else 
        ap_const_lv8_0;
    select_ln535_1_fu_606_p3 <= 
        lshr_ln535_fu_594_p2 when (tmp_6_fu_564_p3(0) = '1') else 
        shl_ln535_fu_600_p2;
    select_ln535_fu_578_p3 <= 
        sub_ln535_fu_572_p2 when (tmp_6_fu_564_p3(0) = '1') else 
        sext_ln535_fu_560_p1;
        sext_ln104_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_fu_506_p3),32));

        sext_ln281_fu_919_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_3_fu_913_p3),9));

        sext_ln329_fu_1064_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln329_fu_1059_p2),32));

        sext_ln32_1_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_729_p4),30));

        sext_ln32_2_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_749_p4),30));

        sext_ln32_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t1_fu_710_p4),30));

        sext_ln535_1_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln535_fu_578_p3),32));

        sext_ln535_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_1_fu_554_p2),9));

    shift_3_fu_976_p2 <= std_logic_vector(unsigned(select_ln319_fu_968_p3) + unsigned(shift_fu_202));
    shl_ln320_fu_1015_p2 <= std_logic_vector(shift_left(unsigned(zext_ln320_fu_1005_p1),to_integer(unsigned('0' & select_ln320_fu_997_p3(31-1 downto 0)))));
    shl_ln408_fu_396_p2 <= std_logic_vector(shift_left(unsigned(ref_4oPi_table_100_q0),to_integer(unsigned('0' & zext_ln408_fu_393_p1(31-1 downto 0)))));
    shl_ln533_fu_538_p2 <= std_logic_vector(shift_left(unsigned(Mx_bits_3_fu_470_p3),to_integer(unsigned('0' & zext_ln533_fu_534_p1(31-1 downto 0)))));
    shl_ln535_fu_600_p2 <= std_logic_vector(shift_left(unsigned(zext_ln535_fu_590_p1),to_integer(unsigned('0' & sext_ln535_1_fu_586_p1(31-1 downto 0)))));
    sin_basis_fu_660_p2 <= (cos_basis_fu_618_p10 xor ap_const_lv1_1);
    sub_ln320_fu_991_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln319_fu_968_p3));
    sub_ln535_fu_572_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sext_ln535_fu_560_p1));
    t1_fu_710_p4 <= second_order_float_sin_cos_K0_q0(29 downto 1);
    t_2_fu_1302_p4 <= ((results_sign_2_fu_1229_p3 & results_exp_fu_1270_p3) & results_sig_fu_1294_p3);
    t_fu_488_p3 <= (tmp_2_fu_478_p4 & ap_const_lv1_1);
    tmp_11_fu_983_p3 <= select_ln319_fu_968_p3(31 downto 31);
    tmp_12_fu_1074_p3 <= newexp_fu_1068_p2(31 downto 31);
    tmp_1_fu_640_p4 <= select_ln535_1_fu_606_p3(28 downto 22);
    tmp_2_fu_478_p4 <= Mx_bits_3_fu_470_p3(57 downto 29);
    tmp_3_fu_803_p4 <= mul_ln32_fu_286_p2(57 downto 42);
    tmp_4_fu_821_p4 <= mul_ln32_fu_286_p2(41 downto 29);
    
    tmp_5_fu_864_p4_proc : process(x_1_fu_858_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_5_fu_864_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := x_1_fu_858_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_5_fu_864_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_5_fu_864_p4_i) := x_1_fu_858_p3(32-1-tmp_5_fu_864_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_5_fu_864_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_6_fu_564_p3 <= Ex_1_fu_554_p2(7 downto 7);
    
    tmp_8_fu_496_p4_proc : process(t_fu_488_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable tmp_8_fu_496_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1D(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := t_fu_488_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_1D(5-1 downto 0)));
            for tmp_8_fu_496_p4_i in 0 to 30-1 loop
                v0_cpy(tmp_8_fu_496_p4_i) := t_fu_488_p3(30-1-tmp_8_fu_496_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(30-1 downto 0)))));
        res_mask := res_mask(30-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_8_fu_496_p4 <= resvalue(30-1 downto 0);
    end process;

    tmp_9_fu_506_p3 <= (ap_const_lv1_1 & tmp_8_fu_496_p4);
    tmp_fu_438_p3 <= h_fu_290_p2(77 downto 77);
    
    tmp_s_fu_518_p3_proc : process(sext_ln104_fu_514_p1)
    begin
        tmp_s_fu_518_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln104_fu_514_p1(i) = '1' then
                tmp_s_fu_518_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    trunc_ln1_fu_749_p4 <= mul_ln30_fu_743_p2(29 downto 16);
    trunc_ln312_fu_854_p1 <= i_fu_182(1 - 1 downto 0);
    trunc_ln318_fu_947_p1 <= in_shift_fu_194(28 - 1 downto 0);
    trunc_ln319_fu_964_p1 <= i_1_fu_198(1 - 1 downto 0);
    trunc_ln321_fu_1033_p1 <= select_ln320_1_fu_1021_p3(28 - 1 downto 0);
    trunc_ln408_fu_365_p1 <= addr_fu_342_p3(4 - 1 downto 0);
    trunc_ln494_fu_332_p1 <= data_fu_300_p1(23 - 1 downto 0);
    trunc_ln_fu_729_p4 <= mul_ln29_fu_282_p2(44 downto 23);
    x_1_fu_858_p3 <= 
        out_bits_1_reg_1433 when (trunc_ln312_fu_854_p1(0) = '1') else 
        out_bits_0_reg_1428;
    xor_ln300_fu_1242_p2 <= (ap_const_lv1_1 xor and_ln300_1_fu_1236_p2);
    xor_ln311_fu_1217_p2 <= (icmp_ln311_1_fu_1212_p2 xor ap_const_lv1_1);
    xor_ln480_fu_453_p2 <= (closepath_reg_1353 xor ap_const_lv1_1);
    zext_ln23_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_trunc_reg_1402),30));
    zext_ln28_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_fu_666_p3),64));
    zext_ln320_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_shift_fu_194),32));
    zext_ln407_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_350_p4),64));
    zext_ln408_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln408_reg_1370),100));
    zext_ln533_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_fu_526_p1),58));
    zext_ln534_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_fu_526_p1),8));
    zext_ln535_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_fu_544_p4),32));
end behav;
